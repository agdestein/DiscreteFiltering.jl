var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DiscreteFiltering","category":"page"},{"location":"#DiscreteFiltering","page":"Home","title":"DiscreteFiltering","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DiscreteFiltering.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DiscreteFiltering]","category":"page"},{"location":"#DiscreteFiltering.DiscreteFiltering","page":"Home","title":"DiscreteFiltering.DiscreteFiltering","text":"Discrete filtering toolbox\n\n\n\n\n\n","category":"module"},{"location":"#DiscreteFiltering.AbstractIntervalDomain","page":"Home","title":"DiscreteFiltering.AbstractIntervalDomain","text":"ClosedIntervalDomain\n\nAbstract type for interval domains.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.AdvectionEquation","page":"Home","title":"DiscreteFiltering.AdvectionEquation","text":"AdvectionEquation(domain, filter = IdentityFilter())\n\nFiltered advection equation.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.BurgersEquation","page":"Home","title":"DiscreteFiltering.BurgersEquation","text":"BurgersEquation(domain, filter = IdentityFilter())\n\nFiltered Burgers equation.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.ClosedIntervalDomain","page":"Home","title":"DiscreteFiltering.ClosedIntervalDomain","text":"ClosedIntervalDomain(left, right)\n\nInterval domain.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.ConvolutionalFilter","page":"Home","title":"DiscreteFiltering.ConvolutionalFilter","text":"ConvolutionalFilter(kernel)\n\nConvolutional filter, parameterized by a filter kernel.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.DiffusionEquation","page":"Home","title":"DiscreteFiltering.DiffusionEquation","text":"DiffusionEquation(\n    domain,\n    filter = IdentityFilter(),\n    f = nothing,\n    g_a = nothing,\n    g_b = nothing\n)\n\nFiltered diffusion equation.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.Domain","page":"Home","title":"DiscreteFiltering.Domain","text":"Domain\n\nAbstract type for different domains.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.Equation","page":"Home","title":"DiscreteFiltering.Equation","text":"Abstract equation.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.Filter","page":"Home","title":"DiscreteFiltering.Filter","text":"Abstract continuous filter.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.IdentityFilter","page":"Home","title":"DiscreteFiltering.IdentityFilter","text":"IdentityFilter()\n\nIdentity filter, which does not filter.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.PeriodicIntervalDomain","page":"Home","title":"DiscreteFiltering.PeriodicIntervalDomain","text":"PeriodicIntervalDomain(left, right)\n\nPeriodic interval domain.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.TopHatFilter","page":"Home","title":"DiscreteFiltering.TopHatFilter","text":"TopHatFilter(width)\n\nTop hat filter, parameterized by a variable filter width.\n\n\n\n\n\n","category":"type"},{"location":"#DiscreteFiltering.GaussianFilter-Tuple{Any, Any}","page":"Home","title":"DiscreteFiltering.GaussianFilter","text":"GaussianFilter(h, σ) -> ConvolutionalFilter GaussianFilter(σ) -> ConvolutionalFilter\n\nCreate Gaussian ConvolutionalFilter with domain width 2h and variance σ^2.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.advection_matrix","page":"Home","title":"DiscreteFiltering.advection_matrix","text":"advection_matrix(domain, n)\n\nAssemble discrete advection matrix.\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteFiltering.apply_filter","page":"Home","title":"DiscreteFiltering.apply_filter","text":"apply_filter(u, filter, domain)\n\nApply filter to a spatial function u defined on domain.\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteFiltering.apply_filter_extend-Tuple{Any, Any, Any}","page":"Home","title":"DiscreteFiltering.apply_filter_extend","text":"apply_filter_extend(u, filter, domain)\n\nExtend function beyond beyond boundaries before filtering.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.apply_filter_extend-Tuple{Any, ConvolutionalFilter, ClosedIntervalDomain}","page":"Home","title":"DiscreteFiltering.apply_filter_extend","text":"apply_filter_extend(u, filter, domain)\n\nExtend function beyond beyond boundaries before filtering.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.diffusion_matrix","page":"Home","title":"DiscreteFiltering.diffusion_matrix","text":"diffusion_matrix(domain, n)\n\nAssemble discrete diffusion matrix.\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteFiltering.discretize","page":"Home","title":"DiscreteFiltering.discretize","text":"discretize(domain, N)\n\nDiscretize domain with N points.\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteFiltering.filter_matrix","page":"Home","title":"DiscreteFiltering.filter_matrix","text":"filter_matrix(f, domain, M, N)\n\nAssemble discrete filtering matrix from a continuous filter f.\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteFiltering.filter_matrix_meshwidth-Tuple{TopHatFilter, PeriodicIntervalDomain, Any}","page":"Home","title":"DiscreteFiltering.filter_matrix_meshwidth","text":"filtermatrixmeshwidth(f, domain, N)\n\nAssemble discrete filtering matrix from a continuous filter f width constant width h(x) = Delta x  2.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.interpolation_matrix-Tuple{Any, Any}","page":"Home","title":"DiscreteFiltering.interpolation_matrix","text":"interpolation_matrix(x, ξ)\n\nCreate interpolation matrix from grid ξ to grid x.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.reconstruction_matrix","page":"Home","title":"DiscreteFiltering.reconstruction_matrix","text":"reconstruction_matrix(filter, domain, M, N)\n\nApproximate R of size N × M, the inverse of the discrete filtering matrix W of size M × N.\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteFiltering.reconstruction_matrix_meshwidth-Tuple{TopHatFilter, PeriodicIntervalDomain, Any}","page":"Home","title":"DiscreteFiltering.reconstruction_matrix_meshwidth","text":"reconstructionmatrixmeshwidth(f, domain, N)\n\nAssemble inverse discrete filtering matrix from a continuous filter f width constant width h(x) = Delta x  2.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.ridge","page":"Home","title":"DiscreteFiltering.ridge","text":"ridge(A, b, λ = 0)\n\nCompute the solution to min ||Ax - b||² + λ||x||².\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteFiltering.solve","page":"Home","title":"DiscreteFiltering.solve","text":"solve\n\nSolve equation.\n\n\n\n\n\n","category":"function"},{"location":"#DiscreteFiltering.solve-Union{Tuple{F}, Tuple{T}, Tuple{AdvectionEquation{PeriodicIntervalDomain{T}, F}, Any, Any, Any, Any}} where {T, F}","page":"Home","title":"DiscreteFiltering.solve","text":"solve(\n    equation::AdvectionEquation{PeriodicIntervalDomain{T},F},\n    u,\n    tlist,\n    M,\n    N;\n    method = \"filterfirst\",\n    subspacedim = 10,\n    solver = QNDF(),\n    reltol = 1e-4,\n    abstol = 1e-6,\n) where {T,F}\n\nSolve equation from tlist[1] to tlist[2] with initial conditions u and a discretization of M and N points. If method is \"filterfirst\", the equation is filtered then discretized. If method is \"discretizefirst\", the equation is discretized then filtered. The parameter subspacedim controls the accuracy of the linear exponential timestepping.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.solve-Union{Tuple{F}, Tuple{T}, Tuple{DiffusionEquation{ClosedIntervalDomain{T}, F}, Any, Any, Any, Any}} where {T, F}","page":"Home","title":"DiscreteFiltering.solve","text":"solve(\n    equation::DiffusionEquation{ClosedIntervalDomain{T},F},\n    u,\n    tlist,\n    M,\n    N;\n    method = \"filterfirst\",\n    boundary_conditions = \"exact\",\n    solver = QNDF(),\n    abstol = 1e-4,\n    reltol = 1e-3,\n    degmax = 10,\n    λ = 1e-6\n) where {T,F}\n\nSolve equation from tlist[1] to tlist[2] with initial conditions u and a discretization of M and N points. If method is \"filterfirst\", the equation is filtered then discretized. If method is \"discretizefirst\", the equation is discretized then filtered.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.solve-Union{Tuple{F}, Tuple{T}, Tuple{DiffusionEquation{PeriodicIntervalDomain{T}, F}, Any, Any, Any, Any}} where {T, F}","page":"Home","title":"DiscreteFiltering.solve","text":"solve(\n    equation::DiffusionEquation{PeriodicIntervalDomain{T},F},\n    u,\n    tlist,\n    M,\n    N;\n    method = \"filterfirst\",\n    solver = QNDF(),\n    abstol = 1e-4,\n    reltol = 1e-3,\n    degmax = 10,\n    λ = 1e-6\n) where {T,F}\n\nSolve equation from tlist[1] to tlist[2] with initial conditions u and a discretization of M and N points. If method is \"filterfirst\", the equation is filtered then discretized. If method is \"discretizefirst\", the equation is discretized then filtered.\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.solve_adbc-Union{Tuple{T}, Tuple{DiffusionEquation{ClosedIntervalDomain{T}, TopHatFilter}, Any, Any, Any}, Tuple{DiffusionEquation{ClosedIntervalDomain{T}, TopHatFilter}, Any, Any, Any, Any}} where T","page":"Home","title":"DiscreteFiltering.solve_adbc","text":"solve_adbc(equation, u, tlist, n, dt = (tlist[2] - tlist[1]) / 200)\n\nSolve filtered equation using approximate deconvolution boundary conditions (ADBC). This approach was proposed in [Borggaard 2006].\n\nJ. Borggaard, T. Iliescu, Approximate deconvolution boundary conditions for large eddy simulation, Applied Mathematics Letters 19 (8) (2006) 735–740. doi: https://doi.org/10.1016/j.aml.2005.08.022. URL: https://www.sciencedirect.com/science/article/pii/S0893965905003319\n\n\n\n\n\n","category":"method"},{"location":"#DiscreteFiltering.solve_burgers-Tuple{}","page":"Home","title":"DiscreteFiltering.solve_burgers","text":"solve_burgers()\n\nSolve Burgers equation.\n\n\n\n\n\n","category":"method"}]
}
